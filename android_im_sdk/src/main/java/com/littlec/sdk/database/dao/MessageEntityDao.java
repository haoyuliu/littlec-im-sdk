package com.littlec.sdk.database.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.littlec.sdk.database.entity.MediaEntity;

import com.littlec.sdk.database.entity.MessageEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_ENTITY".
*/
public class MessageEntityDao extends AbstractDao<MessageEntity, Long> {

    public static final String TABLENAME = "MESSAGE_ENTITY";

    /**
     * Properties of entity MessageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MsgId = new Property(1, String.class, "msgId", false, "MSG_ID");
        public final static Property ChatType = new Property(2, Integer.class, "chatType", false, "CHAT_TYPE");
        public final static Property Guid = new Property(3, Long.class, "guid", false, "GUID");
        public final static Property From = new Property(4, String.class, "from", false, "FROM");
        public final static Property FromNick = new Property(5, String.class, "fromNick", false, "FROM_NICK");
        public final static Property To = new Property(6, String.class, "to", false, "TO");
        public final static Property SendOrRecv = new Property(7, int.class, "sendOrRecv", false, "SEND_OR_RECV");
        public final static Property ContentType = new Property(8, int.class, "contentType", false, "CONTENT_TYPE");
        public final static Property Status = new Property(9, int.class, "status", false, "STATUS");
        public final static Property CreateTime = new Property(10, long.class, "createTime", false, "CREATE_TIME");
        public final static Property Read = new Property(11, boolean.class, "read", false, "READ");
        public final static Property BurnAfterRead = new Property(12, boolean.class, "burnAfterRead", false, "BURN_AFTER_READ");
        public final static Property Extra = new Property(13, String.class, "extra", false, "EXTRA");
        public final static Property Data1 = new Property(14, String.class, "data1", false, "DATA1");
        public final static Property JiMaoFlag = new Property(15, boolean.class, "jiMaoFlag", false, "JI_MAO_FLAG");
        public final static Property ConversationId = new Property(16, String.class, "conversationId", false, "CONVERSATION_ID");
        public final static Property MediaId = new Property(17, long.class, "MediaId", false, "MEDIA_ID");
    }

    private DaoSession daoSession;

    private Query<MessageEntity> conversationEntity_MessageEntitiesQuery;

    public MessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MSG_ID\" TEXT," + // 1: msgId
                "\"CHAT_TYPE\" INTEGER," + // 2: chatType
                "\"GUID\" INTEGER," + // 3: guid
                "\"FROM\" TEXT," + // 4: from
                "\"FROM_NICK\" TEXT," + // 5: fromNick
                "\"TO\" TEXT," + // 6: to
                "\"SEND_OR_RECV\" INTEGER NOT NULL ," + // 7: sendOrRecv
                "\"CONTENT_TYPE\" INTEGER NOT NULL ," + // 8: contentType
                "\"STATUS\" INTEGER NOT NULL ," + // 9: status
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 10: createTime
                "\"READ\" INTEGER NOT NULL ," + // 11: read
                "\"BURN_AFTER_READ\" INTEGER NOT NULL ," + // 12: burnAfterRead
                "\"EXTRA\" TEXT," + // 13: extra
                "\"DATA1\" TEXT," + // 14: data1
                "\"JI_MAO_FLAG\" INTEGER NOT NULL ," + // 15: jiMaoFlag
                "\"CONVERSATION_ID\" TEXT NOT NULL ," + // 16: conversationId
                "\"MEDIA_ID\" INTEGER NOT NULL );"); // 17: MediaId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(2, msgId);
        }
 
        Integer chatType = entity.getChatType();
        if (chatType != null) {
            stmt.bindLong(3, chatType);
        }
 
        Long guid = entity.getGuid();
        if (guid != null) {
            stmt.bindLong(4, guid);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(5, from);
        }
 
        String fromNick = entity.getFromNick();
        if (fromNick != null) {
            stmt.bindString(6, fromNick);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(7, to);
        }
        stmt.bindLong(8, entity.getSendOrRecv());
        stmt.bindLong(9, entity.getContentType());
        stmt.bindLong(10, entity.getStatus());
        stmt.bindLong(11, entity.getCreateTime());
        stmt.bindLong(12, entity.getRead() ? 1L: 0L);
        stmt.bindLong(13, entity.getBurnAfterRead() ? 1L: 0L);
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(14, extra);
        }
 
        String data1 = entity.getData1();
        if (data1 != null) {
            stmt.bindString(15, data1);
        }
        stmt.bindLong(16, entity.getJiMaoFlag() ? 1L: 0L);
        stmt.bindString(17, entity.getConversationId());
        stmt.bindLong(18, entity.getMediaId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(2, msgId);
        }
 
        Integer chatType = entity.getChatType();
        if (chatType != null) {
            stmt.bindLong(3, chatType);
        }
 
        Long guid = entity.getGuid();
        if (guid != null) {
            stmt.bindLong(4, guid);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(5, from);
        }
 
        String fromNick = entity.getFromNick();
        if (fromNick != null) {
            stmt.bindString(6, fromNick);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(7, to);
        }
        stmt.bindLong(8, entity.getSendOrRecv());
        stmt.bindLong(9, entity.getContentType());
        stmt.bindLong(10, entity.getStatus());
        stmt.bindLong(11, entity.getCreateTime());
        stmt.bindLong(12, entity.getRead() ? 1L: 0L);
        stmt.bindLong(13, entity.getBurnAfterRead() ? 1L: 0L);
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(14, extra);
        }
 
        String data1 = entity.getData1();
        if (data1 != null) {
            stmt.bindString(15, data1);
        }
        stmt.bindLong(16, entity.getJiMaoFlag() ? 1L: 0L);
        stmt.bindString(17, entity.getConversationId());
        stmt.bindLong(18, entity.getMediaId());
    }

    @Override
    protected final void attachEntity(MessageEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageEntity readEntity(Cursor cursor, int offset) {
        MessageEntity entity = new MessageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // msgId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // chatType
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // guid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // from
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fromNick
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // to
            cursor.getInt(offset + 7), // sendOrRecv
            cursor.getInt(offset + 8), // contentType
            cursor.getInt(offset + 9), // status
            cursor.getLong(offset + 10), // createTime
            cursor.getShort(offset + 11) != 0, // read
            cursor.getShort(offset + 12) != 0, // burnAfterRead
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // extra
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // data1
            cursor.getShort(offset + 15) != 0, // jiMaoFlag
            cursor.getString(offset + 16), // conversationId
            cursor.getLong(offset + 17) // MediaId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsgId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChatType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setGuid(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setFrom(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFromNick(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSendOrRecv(cursor.getInt(offset + 7));
        entity.setContentType(cursor.getInt(offset + 8));
        entity.setStatus(cursor.getInt(offset + 9));
        entity.setCreateTime(cursor.getLong(offset + 10));
        entity.setRead(cursor.getShort(offset + 11) != 0);
        entity.setBurnAfterRead(cursor.getShort(offset + 12) != 0);
        entity.setExtra(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setData1(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setJiMaoFlag(cursor.getShort(offset + 15) != 0);
        entity.setConversationId(cursor.getString(offset + 16));
        entity.setMediaId(cursor.getLong(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "messageEntities" to-many relationship of ConversationEntity. */
    public List<MessageEntity> _queryConversationEntity_MessageEntities(String conversationId) {
        synchronized (this) {
            if (conversationEntity_MessageEntitiesQuery == null) {
                QueryBuilder<MessageEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ConversationId.eq(null));
                queryBuilder.orderRaw("T.'CREATE_TIME' ASC");
                conversationEntity_MessageEntitiesQuery = queryBuilder.build();
            }
        }
        Query<MessageEntity> query = conversationEntity_MessageEntitiesQuery.forCurrentThread();
        query.setParameter(0, conversationId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMediaEntityDao().getAllColumns());
            builder.append(" FROM MESSAGE_ENTITY T");
            builder.append(" LEFT JOIN MEDIA_ENTITY T0 ON T.\"MEDIA_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MessageEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        MessageEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        MediaEntity mediaEntity = loadCurrentOther(daoSession.getMediaEntityDao(), cursor, offset);
         if(mediaEntity != null) {
            entity.setMediaEntity(mediaEntity);
        }

        return entity;    
    }

    public MessageEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MessageEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MessageEntity> list = new ArrayList<MessageEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MessageEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MessageEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
