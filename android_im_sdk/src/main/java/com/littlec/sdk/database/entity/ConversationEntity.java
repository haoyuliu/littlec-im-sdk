package com.littlec.sdk.database.entity;

import android.os.Parcel;
import android.os.Parcelable;

import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Id;

import java.util.List;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.OrderBy;
import org.greenrobot.greendao.annotation.ToMany;
import org.greenrobot.greendao.DaoException;
import com.littlec.sdk.database.dao.DaoSession;
import com.littlec.sdk.database.dao.MessageEntityDao;
import com.littlec.sdk.database.dao.ConversationEntityDao;


// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "Conversation".
 */
@Entity
public class ConversationEntity  implements Parcelable{
    @Id
    private String _recipientId;
    private Boolean top;
    private Boolean hide;
    private int chattype;
    private String msgContent;
    private int msgContentType;
    private int msgStatus;
    private long date;
    private int totalCount;
    private int unreadCount;
    private String data1;
    @ToMany(referencedJoinProperty = "conversationId")
    @OrderBy("createTime ASC")
    private List<MessageEntity>messageEntities;
    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;
    /** Used for active entity operations. */
    @Generated(hash = 2058273996)
    private transient ConversationEntityDao myDao;
    @Generated(hash = 787715067)
    public ConversationEntity(String _recipientId, Boolean top, Boolean hide, int chattype, String msgContent,
            int msgContentType, int msgStatus, long date, int totalCount, int unreadCount, String data1) {
        this._recipientId = _recipientId;
        this.top = top;
        this.hide = hide;
        this.chattype = chattype;
        this.msgContent = msgContent;
        this.msgContentType = msgContentType;
        this.msgStatus = msgStatus;
        this.date = date;
        this.totalCount = totalCount;
        this.unreadCount = unreadCount;
        this.data1 = data1;
    }
    @Generated(hash = 2044044276)
    public ConversationEntity() {
    }
    public String get_recipientId() {
        return this._recipientId;
    }
    public void set_recipientId(String _recipientId) {
        this._recipientId = _recipientId;
    }
    public Boolean getTop() {
        return this.top;
    }
    public void setTop(Boolean top) {
        this.top = top;
    }
    public Boolean getHide() {
        return this.hide;
    }
    public void setHide(Boolean hide) {
        this.hide = hide;
    }
    public int getChattype() {
        return this.chattype;
    }
    public void setChattype(int chattype) {
        this.chattype = chattype;
    }
    public String getMsgContent() {
        return this.msgContent;
    }
    public void setMsgContent(String msgContent) {
        this.msgContent = msgContent;
    }
    public int getMsgContentType() {
        return this.msgContentType;
    }
    public void setMsgContentType(int msgContentType) {
        this.msgContentType = msgContentType;
    }
    public int getMsgStatus() {
        return this.msgStatus;
    }
    public void setMsgStatus(int msgStatus) {
        this.msgStatus = msgStatus;
    }
    public long getDate() {
        return this.date;
    }
    public void setDate(long date) {
        this.date = date;
    }
    public int getTotalCount() {
        return this.totalCount;
    }
    public void setTotalCount(int totalCount) {
        this.totalCount = totalCount;
    }
    public int getUnreadCount() {
        return this.unreadCount;
    }
    public void setUnreadCount(int unreadCount) {
        this.unreadCount = unreadCount;
    }
    public String getData1() {
        return this.data1;
    }
    public void setData1(String data1) {
        this.data1 = data1;
    }
    /**
     * To-many relationship, resolved on first access (and after reset).
     * Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated(hash = 561773148)
    public List<MessageEntity> getMessageEntities() {
        if (messageEntities == null) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MessageEntityDao targetDao = daoSession.getMessageEntityDao();
            List<MessageEntity> messageEntitiesNew = targetDao
                    ._queryConversationEntity_MessageEntities(_recipientId);
            synchronized (this) {
                if (messageEntities == null) {
                    messageEntities = messageEntitiesNew;
                }
            }
        }
        return messageEntities;
    }
    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated(hash = 1573698177)
    public synchronized void resetMessageEntities() {
        messageEntities = null;
    }
    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }
    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }
    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }
    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1872900634)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getConversationEntityDao() : null;
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

    public ConversationEntity(String id) {
        this._recipientId=id;
    }
    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(this._recipientId);
        dest.writeValue(this.top);
        dest.writeValue(this.hide);
        dest.writeInt(this.chattype);
        dest.writeString(this.msgContent);
        dest.writeInt(this.msgContentType);
        dest.writeInt(this.msgStatus);
        dest.writeLong(this.date);
        dest.writeInt(this.totalCount);
        dest.writeInt(this.unreadCount);
        dest.writeString(this.data1);
        dest.writeTypedList(this.messageEntities);
    }


    protected ConversationEntity(Parcel in) {
        this._recipientId = in.readString();
        this.top = (Boolean) in.readValue(Boolean.class.getClassLoader());
        this.hide = (Boolean) in.readValue(Boolean.class.getClassLoader());
        this.chattype = in.readInt();
        this.msgContent = in.readString();
        this.msgContentType = in.readInt();
        this.msgStatus = in.readInt();
        this.date = in.readLong();
        this.totalCount = in.readInt();
        this.unreadCount = in.readInt();
        this.data1 = in.readString();
        this.messageEntities = in.createTypedArrayList(MessageEntity.CREATOR);
    }

    public static final Parcelable.Creator<ConversationEntity> CREATOR = new Parcelable.Creator<ConversationEntity>() {
        @Override
        public ConversationEntity createFromParcel(Parcel source) {
            return new ConversationEntity(source);
        }

        @Override
        public ConversationEntity[] newArray(int size) {
            return new ConversationEntity[size];
        }
    };
}
