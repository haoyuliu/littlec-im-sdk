package com.littlec.sdk.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.littlec.sdk.database.entity.FriendReqDBEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND_REQ_DBENTITY".
*/
public class FriendReqDBEntityDao extends AbstractDao<FriendReqDBEntity, String> {

    public static final String TABLENAME = "FRIEND_REQ_DBENTITY";

    /**
     * Properties of entity FriendReqDBEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FromUserName = new Property(0, String.class, "fromUserName", true, "FROM_USER_NAME");
        public final static Property FromNick = new Property(1, String.class, "fromNick", false, "FROM_NICK");
        public final static Property RegId = new Property(2, String.class, "regId", false, "REG_ID");
        public final static Property ReqType = new Property(3, Integer.class, "reqType", false, "REQ_TYPE");
        public final static Property Remark = new Property(4, String.class, "remark", false, "REMARK");
        public final static Property Modified = new Property(5, Long.class, "modified", false, "MODIFIED");
        public final static Property Contactstatus = new Property(6, Integer.class, "contactstatus", false, "CONTACTSTATUS");
        public final static Property IsDeal = new Property(7, Boolean.class, "isDeal", false, "IS_DEAL");
    }


    public FriendReqDBEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FriendReqDBEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND_REQ_DBENTITY\" (" + //
                "\"FROM_USER_NAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: fromUserName
                "\"FROM_NICK\" TEXT," + // 1: fromNick
                "\"REG_ID\" TEXT," + // 2: regId
                "\"REQ_TYPE\" INTEGER," + // 3: reqType
                "\"REMARK\" TEXT," + // 4: remark
                "\"MODIFIED\" INTEGER," + // 5: modified
                "\"CONTACTSTATUS\" INTEGER," + // 6: contactstatus
                "\"IS_DEAL\" INTEGER);"); // 7: isDeal
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND_REQ_DBENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FriendReqDBEntity entity) {
        stmt.clearBindings();
 
        String fromUserName = entity.getFromUserName();
        if (fromUserName != null) {
            stmt.bindString(1, fromUserName);
        }
 
        String fromNick = entity.getFromNick();
        if (fromNick != null) {
            stmt.bindString(2, fromNick);
        }
 
        String regId = entity.getRegId();
        if (regId != null) {
            stmt.bindString(3, regId);
        }
 
        Integer reqType = entity.getReqType();
        if (reqType != null) {
            stmt.bindLong(4, reqType);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(5, remark);
        }
 
        Long modified = entity.getModified();
        if (modified != null) {
            stmt.bindLong(6, modified);
        }
 
        Integer contactstatus = entity.getContactstatus();
        if (contactstatus != null) {
            stmt.bindLong(7, contactstatus);
        }
 
        Boolean isDeal = entity.getIsDeal();
        if (isDeal != null) {
            stmt.bindLong(8, isDeal ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FriendReqDBEntity entity) {
        stmt.clearBindings();
 
        String fromUserName = entity.getFromUserName();
        if (fromUserName != null) {
            stmt.bindString(1, fromUserName);
        }
 
        String fromNick = entity.getFromNick();
        if (fromNick != null) {
            stmt.bindString(2, fromNick);
        }
 
        String regId = entity.getRegId();
        if (regId != null) {
            stmt.bindString(3, regId);
        }
 
        Integer reqType = entity.getReqType();
        if (reqType != null) {
            stmt.bindLong(4, reqType);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(5, remark);
        }
 
        Long modified = entity.getModified();
        if (modified != null) {
            stmt.bindLong(6, modified);
        }
 
        Integer contactstatus = entity.getContactstatus();
        if (contactstatus != null) {
            stmt.bindLong(7, contactstatus);
        }
 
        Boolean isDeal = entity.getIsDeal();
        if (isDeal != null) {
            stmt.bindLong(8, isDeal ? 1L: 0L);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FriendReqDBEntity readEntity(Cursor cursor, int offset) {
        FriendReqDBEntity entity = new FriendReqDBEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // fromUserName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fromNick
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // regId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // reqType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remark
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // modified
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // contactstatus
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // isDeal
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FriendReqDBEntity entity, int offset) {
        entity.setFromUserName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFromNick(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRegId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReqType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setRemark(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setModified(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setContactstatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIsDeal(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(FriendReqDBEntity entity, long rowId) {
        return entity.getFromUserName();
    }
    
    @Override
    public String getKey(FriendReqDBEntity entity) {
        if(entity != null) {
            return entity.getFromUserName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FriendReqDBEntity entity) {
        return entity.getFromUserName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
