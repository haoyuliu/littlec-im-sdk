package com.littlec.sdk.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.littlec.sdk.database.entity.MediaEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEDIA_ENTITY".
*/
public class MediaEntityDao extends AbstractDao<MediaEntity, Long> {

    public static final String TABLENAME = "MEDIA_ENTITY";

    /**
     * Properties of entity MediaEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property ThumbPath = new Property(2, String.class, "thumbPath", false, "THUMB_PATH");
        public final static Property FileName = new Property(3, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileLength = new Property(4, long.class, "fileLength", false, "FILE_LENGTH");
        public final static Property IsOrigin = new Property(5, Boolean.class, "isOrigin", false, "IS_ORIGIN");
        public final static Property OriginalLink = new Property(6, String.class, "originalLink", false, "ORIGINAL_LINK");
        public final static Property LargeLink = new Property(7, String.class, "largeLink", false, "LARGE_LINK");
        public final static Property MiddleLink = new Property(8, String.class, "middleLink", false, "MIDDLE_LINK");
        public final static Property SmallLink = new Property(9, String.class, "smallLink", false, "SMALL_LINK");
        public final static Property Duration = new Property(10, int.class, "duration", false, "DURATION");
        public final static Property Latitude = new Property(11, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(12, double.class, "longitude", false, "LONGITUDE");
        public final static Property Address = new Property(13, String.class, "address", false, "ADDRESS");
        public final static Property LocationDes = new Property(14, String.class, "locationDes", false, "LOCATION_DES");
        public final static Property Title = new Property(15, String.class, "title", false, "TITLE");
        public final static Property WebSite = new Property(16, String.class, "webSite", false, "WEB_SITE");
        public final static Property Summary = new Property(17, String.class, "summary", false, "SUMMARY");
        public final static Property IconUrl = new Property(18, String.class, "iconUrl", false, "ICON_URL");
        public final static Property Data1 = new Property(19, String.class, "data1", false, "DATA1");
    }


    public MediaEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MediaEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEDIA_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CONTENT\" TEXT," + // 1: content
                "\"THUMB_PATH\" TEXT," + // 2: thumbPath
                "\"FILE_NAME\" TEXT," + // 3: fileName
                "\"FILE_LENGTH\" INTEGER NOT NULL ," + // 4: fileLength
                "\"IS_ORIGIN\" INTEGER," + // 5: isOrigin
                "\"ORIGINAL_LINK\" TEXT," + // 6: originalLink
                "\"LARGE_LINK\" TEXT," + // 7: largeLink
                "\"MIDDLE_LINK\" TEXT," + // 8: middleLink
                "\"SMALL_LINK\" TEXT," + // 9: smallLink
                "\"DURATION\" INTEGER NOT NULL ," + // 10: duration
                "\"LATITUDE\" REAL NOT NULL ," + // 11: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 12: longitude
                "\"ADDRESS\" TEXT," + // 13: address
                "\"LOCATION_DES\" TEXT," + // 14: locationDes
                "\"TITLE\" TEXT," + // 15: title
                "\"WEB_SITE\" TEXT," + // 16: webSite
                "\"SUMMARY\" TEXT," + // 17: summary
                "\"ICON_URL\" TEXT," + // 18: iconUrl
                "\"DATA1\" TEXT);"); // 19: data1
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEDIA_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MediaEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String thumbPath = entity.getThumbPath();
        if (thumbPath != null) {
            stmt.bindString(3, thumbPath);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
        stmt.bindLong(5, entity.getFileLength());
 
        Boolean isOrigin = entity.getIsOrigin();
        if (isOrigin != null) {
            stmt.bindLong(6, isOrigin ? 1L: 0L);
        }
 
        String originalLink = entity.getOriginalLink();
        if (originalLink != null) {
            stmt.bindString(7, originalLink);
        }
 
        String largeLink = entity.getLargeLink();
        if (largeLink != null) {
            stmt.bindString(8, largeLink);
        }
 
        String middleLink = entity.getMiddleLink();
        if (middleLink != null) {
            stmt.bindString(9, middleLink);
        }
 
        String smallLink = entity.getSmallLink();
        if (smallLink != null) {
            stmt.bindString(10, smallLink);
        }
        stmt.bindLong(11, entity.getDuration());
        stmt.bindDouble(12, entity.getLatitude());
        stmt.bindDouble(13, entity.getLongitude());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(14, address);
        }
 
        String locationDes = entity.getLocationDes();
        if (locationDes != null) {
            stmt.bindString(15, locationDes);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(16, title);
        }
 
        String webSite = entity.getWebSite();
        if (webSite != null) {
            stmt.bindString(17, webSite);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(18, summary);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(19, iconUrl);
        }
 
        String data1 = entity.getData1();
        if (data1 != null) {
            stmt.bindString(20, data1);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MediaEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String thumbPath = entity.getThumbPath();
        if (thumbPath != null) {
            stmt.bindString(3, thumbPath);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
        stmt.bindLong(5, entity.getFileLength());
 
        Boolean isOrigin = entity.getIsOrigin();
        if (isOrigin != null) {
            stmt.bindLong(6, isOrigin ? 1L: 0L);
        }
 
        String originalLink = entity.getOriginalLink();
        if (originalLink != null) {
            stmt.bindString(7, originalLink);
        }
 
        String largeLink = entity.getLargeLink();
        if (largeLink != null) {
            stmt.bindString(8, largeLink);
        }
 
        String middleLink = entity.getMiddleLink();
        if (middleLink != null) {
            stmt.bindString(9, middleLink);
        }
 
        String smallLink = entity.getSmallLink();
        if (smallLink != null) {
            stmt.bindString(10, smallLink);
        }
        stmt.bindLong(11, entity.getDuration());
        stmt.bindDouble(12, entity.getLatitude());
        stmt.bindDouble(13, entity.getLongitude());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(14, address);
        }
 
        String locationDes = entity.getLocationDes();
        if (locationDes != null) {
            stmt.bindString(15, locationDes);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(16, title);
        }
 
        String webSite = entity.getWebSite();
        if (webSite != null) {
            stmt.bindString(17, webSite);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(18, summary);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(19, iconUrl);
        }
 
        String data1 = entity.getData1();
        if (data1 != null) {
            stmt.bindString(20, data1);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MediaEntity readEntity(Cursor cursor, int offset) {
        MediaEntity entity = new MediaEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // thumbPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileName
            cursor.getLong(offset + 4), // fileLength
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isOrigin
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // originalLink
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // largeLink
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // middleLink
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // smallLink
            cursor.getInt(offset + 10), // duration
            cursor.getDouble(offset + 11), // latitude
            cursor.getDouble(offset + 12), // longitude
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // address
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // locationDes
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // title
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // webSite
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // summary
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // iconUrl
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // data1
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MediaEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setThumbPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileLength(cursor.getLong(offset + 4));
        entity.setIsOrigin(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setOriginalLink(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLargeLink(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMiddleLink(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSmallLink(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDuration(cursor.getInt(offset + 10));
        entity.setLatitude(cursor.getDouble(offset + 11));
        entity.setLongitude(cursor.getDouble(offset + 12));
        entity.setAddress(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLocationDes(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTitle(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setWebSite(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSummary(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIconUrl(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setData1(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MediaEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MediaEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MediaEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
