package com.littlec.sdk.database.entity;

import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Id;

import java.util.List;

import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.ToMany;
import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.ToOne;

import com.littlec.sdk.database.dao.DaoSession;
import com.littlec.sdk.database.dao.MemberEntityDao;
import com.littlec.sdk.database.dao.GroupEntityDao;
import com.littlec.sdk.database.dao.TagEntityDao;


// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "Group".
 */
@Entity
public class GroupEntity {
    @Id
    private String groupId;
    private String groupName;
    private Long createDate;
    private Long modifyDate;
    private int quit;
    private int mute;
    private Integer memberCount;
    private Integer type;//群类型亲情网群（1）， 普通群（null or 0）
    private String desc;
    private String data1;
    private Long tagId;
    @ToOne(joinProperty = "tagId")
    private TagEntity tag;//标签
    @ToMany(referencedJoinProperty = "groupId")
    private List<MemberEntity> memberEntities;
    /**
     * Used to resolve relations
     */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;
    /**
     * Used for active entity operations.
     */
    @Generated(hash = 1615357719)
    private transient GroupEntityDao myDao;
 

    @Generated(hash = 1476226821)
    public GroupEntity(String groupId, String groupName, Long createDate, Long modifyDate,
            int quit, int mute, Integer memberCount, Integer type, String desc, String data1,
            Long tagId) {
        this.groupId = groupId;
        this.groupName = groupName;
        this.createDate = createDate;
        this.modifyDate = modifyDate;
        this.quit = quit;
        this.mute = mute;
        this.memberCount = memberCount;
        this.type = type;
        this.desc = desc;
        this.data1 = data1;
        this.tagId = tagId;
    }

    @Generated(hash = 954040478)
    public GroupEntity() {
    }

    @Generated(hash = 1006483784)
    private transient Long tag__resolvedKey;


    public String getGroupId() {
        return this.groupId;
    }

    public void setGroupId(String groupId) {
        this.groupId = groupId;
    }

    public String getGroupName() {
        return this.groupName;
    }

    public void setGroupName(String groupName) {
        this.groupName = groupName;
    }

    public Long getCreateDate() {
        return this.createDate;
    }

    public void setCreateDate(Long createDate) {
        this.createDate = createDate;
    }

    public Long getModifyDate() {
        return this.modifyDate;
    }

    public void setModifyDate(Long modifyDate) {
        this.modifyDate = modifyDate;
    }

    public int getQuit() {
        return this.quit;
    }

    public void setQuit(int quit) {
        this.quit = quit;
    }

    public int getMute() {
        return this.mute;
    }

    public void setMute(int mute) {
        this.mute = mute;
    }

    public Integer getMemberCount() {
        return this.memberCount;
    }

    public void setMemberCount(Integer memberCount) {
        this.memberCount = memberCount;
    }

    public String getDesc() {
        return this.desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public String getData1() {
        return this.data1;
    }

    public void setData1(String data1) {
        this.data1 = data1;
    }

    /**
     * To-many relationship, resolved on first access (and after reset).
     * Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated(hash = 1476920728)
    public List<MemberEntity> getMemberEntities() {
        if (memberEntities == null) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MemberEntityDao targetDao = daoSession.getMemberEntityDao();
            List<MemberEntity> memberEntitiesNew = targetDao
                    ._queryGroupEntity_MemberEntities(groupId);
            synchronized (this) {
                if (memberEntities == null) {
                    memberEntities = memberEntitiesNew;
                }
            }
        }
        return memberEntities;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    @Generated(hash = 2012835632)
    public synchronized void resetMemberEntities() {
        memberEntities = null;
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    @Generated(hash = 1578846137)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGroupEntityDao() : null;
    }

    public Integer getType() {
        return this.type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Long getTagId() {
        return this.tagId;
    }

    public void setTagId(Long tagId) {
        this.tagId = tagId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 1511750795)
    public TagEntity getTag() {
        Long __key = this.tagId;
        if (tag__resolvedKey == null || !tag__resolvedKey.equals(__key)) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TagEntityDao targetDao = daoSession.getTagEntityDao();
            TagEntity tagNew = targetDao.load(__key);
            synchronized (this) {
                tag = tagNew;
                tag__resolvedKey = __key;
            }
        }
        return tag;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 537163392)
    public void setTag(TagEntity tag) {
        synchronized (this) {
            this.tag = tag;
            tagId = tag == null ? null : tag.getId();
            tag__resolvedKey = tagId;
        }
    }



}
