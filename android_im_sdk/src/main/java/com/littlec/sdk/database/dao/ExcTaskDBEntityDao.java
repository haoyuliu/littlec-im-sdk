package com.littlec.sdk.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.littlec.sdk.database.entity.ExcTaskDBEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXC_TASK_DBENTITY".
*/
public class ExcTaskDBEntityDao extends AbstractDao<ExcTaskDBEntity, String> {

    public static final String TABLENAME = "EXC_TASK_DBENTITY";

    /**
     * Properties of entity ExcTaskDBEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TaskId = new Property(0, String.class, "TaskId", true, "TASK_ID");
        public final static Property FirstSendTime = new Property(1, Long.class, "FirstSendTime", false, "FIRST_SEND_TIME");
        public final static Property SendCount = new Property(2, Integer.class, "SendCount", false, "SEND_COUNT");
        public final static Property ExcType = new Property(3, Integer.class, "ExcType", false, "EXC_TYPE");
        public final static Property MsgID = new Property(4, Long.class, "msgID", false, "MSG_ID");
    }


    public ExcTaskDBEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ExcTaskDBEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXC_TASK_DBENTITY\" (" + //
                "\"TASK_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: TaskId
                "\"FIRST_SEND_TIME\" INTEGER," + // 1: FirstSendTime
                "\"SEND_COUNT\" INTEGER," + // 2: SendCount
                "\"EXC_TYPE\" INTEGER," + // 3: ExcType
                "\"MSG_ID\" INTEGER);"); // 4: msgID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXC_TASK_DBENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExcTaskDBEntity entity) {
        stmt.clearBindings();
 
        String TaskId = entity.getTaskId();
        if (TaskId != null) {
            stmt.bindString(1, TaskId);
        }
 
        Long FirstSendTime = entity.getFirstSendTime();
        if (FirstSendTime != null) {
            stmt.bindLong(2, FirstSendTime);
        }
 
        Integer SendCount = entity.getSendCount();
        if (SendCount != null) {
            stmt.bindLong(3, SendCount);
        }
 
        Integer ExcType = entity.getExcType();
        if (ExcType != null) {
            stmt.bindLong(4, ExcType);
        }
 
        Long msgID = entity.getMsgID();
        if (msgID != null) {
            stmt.bindLong(5, msgID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExcTaskDBEntity entity) {
        stmt.clearBindings();
 
        String TaskId = entity.getTaskId();
        if (TaskId != null) {
            stmt.bindString(1, TaskId);
        }
 
        Long FirstSendTime = entity.getFirstSendTime();
        if (FirstSendTime != null) {
            stmt.bindLong(2, FirstSendTime);
        }
 
        Integer SendCount = entity.getSendCount();
        if (SendCount != null) {
            stmt.bindLong(3, SendCount);
        }
 
        Integer ExcType = entity.getExcType();
        if (ExcType != null) {
            stmt.bindLong(4, ExcType);
        }
 
        Long msgID = entity.getMsgID();
        if (msgID != null) {
            stmt.bindLong(5, msgID);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ExcTaskDBEntity readEntity(Cursor cursor, int offset) {
        ExcTaskDBEntity entity = new ExcTaskDBEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // TaskId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // FirstSendTime
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // SendCount
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // ExcType
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // msgID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExcTaskDBEntity entity, int offset) {
        entity.setTaskId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFirstSendTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSendCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setExcType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMsgID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ExcTaskDBEntity entity, long rowId) {
        return entity.getTaskId();
    }
    
    @Override
    public String getKey(ExcTaskDBEntity entity) {
        if(entity != null) {
            return entity.getTaskId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ExcTaskDBEntity entity) {
        return entity.getTaskId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
