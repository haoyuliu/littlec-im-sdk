package com.littlec.sdk.database.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.littlec.sdk.database.entity.TagEntity;

import com.littlec.sdk.database.entity.GroupEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_ENTITY".
*/
public class GroupEntityDao extends AbstractDao<GroupEntity, String> {

    public static final String TABLENAME = "GROUP_ENTITY";

    /**
     * Properties of entity GroupEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GroupId = new Property(0, String.class, "groupId", true, "GROUP_ID");
        public final static Property GroupName = new Property(1, String.class, "groupName", false, "GROUP_NAME");
        public final static Property CreateDate = new Property(2, Long.class, "createDate", false, "CREATE_DATE");
        public final static Property ModifyDate = new Property(3, Long.class, "modifyDate", false, "MODIFY_DATE");
        public final static Property Quit = new Property(4, int.class, "quit", false, "QUIT");
        public final static Property Mute = new Property(5, int.class, "mute", false, "MUTE");
        public final static Property MemberCount = new Property(6, Integer.class, "memberCount", false, "MEMBER_COUNT");
        public final static Property Type = new Property(7, Integer.class, "type", false, "TYPE");
        public final static Property Desc = new Property(8, String.class, "desc", false, "DESC");
        public final static Property Data1 = new Property(9, String.class, "data1", false, "DATA1");
        public final static Property TagId = new Property(10, Long.class, "tagId", false, "TAG_ID");
    }

    private DaoSession daoSession;


    public GroupEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GroupEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_ENTITY\" (" + //
                "\"GROUP_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: groupId
                "\"GROUP_NAME\" TEXT," + // 1: groupName
                "\"CREATE_DATE\" INTEGER," + // 2: createDate
                "\"MODIFY_DATE\" INTEGER," + // 3: modifyDate
                "\"QUIT\" INTEGER NOT NULL ," + // 4: quit
                "\"MUTE\" INTEGER NOT NULL ," + // 5: mute
                "\"MEMBER_COUNT\" INTEGER," + // 6: memberCount
                "\"TYPE\" INTEGER," + // 7: type
                "\"DESC\" TEXT," + // 8: desc
                "\"DATA1\" TEXT," + // 9: data1
                "\"TAG_ID\" INTEGER);"); // 10: tagId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupEntity entity) {
        stmt.clearBindings();
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(1, groupId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(2, groupName);
        }
 
        Long createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(3, createDate);
        }
 
        Long modifyDate = entity.getModifyDate();
        if (modifyDate != null) {
            stmt.bindLong(4, modifyDate);
        }
        stmt.bindLong(5, entity.getQuit());
        stmt.bindLong(6, entity.getMute());
 
        Integer memberCount = entity.getMemberCount();
        if (memberCount != null) {
            stmt.bindLong(7, memberCount);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(8, type);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(9, desc);
        }
 
        String data1 = entity.getData1();
        if (data1 != null) {
            stmt.bindString(10, data1);
        }
 
        Long tagId = entity.getTagId();
        if (tagId != null) {
            stmt.bindLong(11, tagId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupEntity entity) {
        stmt.clearBindings();
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(1, groupId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(2, groupName);
        }
 
        Long createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(3, createDate);
        }
 
        Long modifyDate = entity.getModifyDate();
        if (modifyDate != null) {
            stmt.bindLong(4, modifyDate);
        }
        stmt.bindLong(5, entity.getQuit());
        stmt.bindLong(6, entity.getMute());
 
        Integer memberCount = entity.getMemberCount();
        if (memberCount != null) {
            stmt.bindLong(7, memberCount);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(8, type);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(9, desc);
        }
 
        String data1 = entity.getData1();
        if (data1 != null) {
            stmt.bindString(10, data1);
        }
 
        Long tagId = entity.getTagId();
        if (tagId != null) {
            stmt.bindLong(11, tagId);
        }
    }

    @Override
    protected final void attachEntity(GroupEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GroupEntity readEntity(Cursor cursor, int offset) {
        GroupEntity entity = new GroupEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // groupId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // groupName
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // createDate
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // modifyDate
            cursor.getInt(offset + 4), // quit
            cursor.getInt(offset + 5), // mute
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // memberCount
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // desc
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // data1
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // tagId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupEntity entity, int offset) {
        entity.setGroupId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGroupName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateDate(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setModifyDate(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setQuit(cursor.getInt(offset + 4));
        entity.setMute(cursor.getInt(offset + 5));
        entity.setMemberCount(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDesc(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setData1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTagId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(GroupEntity entity, long rowId) {
        return entity.getGroupId();
    }
    
    @Override
    public String getKey(GroupEntity entity) {
        if(entity != null) {
            return entity.getGroupId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupEntity entity) {
        return entity.getGroupId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTagEntityDao().getAllColumns());
            builder.append(" FROM GROUP_ENTITY T");
            builder.append(" LEFT JOIN TAG_ENTITY T0 ON T.\"TAG_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GroupEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        GroupEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TagEntity tag = loadCurrentOther(daoSession.getTagEntityDao(), cursor, offset);
        entity.setTag(tag);

        return entity;    
    }

    public GroupEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GroupEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GroupEntity> list = new ArrayList<GroupEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GroupEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GroupEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
