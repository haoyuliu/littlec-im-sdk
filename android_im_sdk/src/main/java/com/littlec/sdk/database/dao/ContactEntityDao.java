package com.littlec.sdk.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.littlec.sdk.database.entity.ContactEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT_ENTITY".
*/
public class ContactEntityDao extends AbstractDao<ContactEntity, String> {

    public static final String TABLENAME = "CONTACT_ENTITY";

    /**
     * Properties of entity ContactEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserName = new Property(0, String.class, "userName", true, "USER_NAME");
        public final static Property NickName = new Property(1, String.class, "nickName", false, "NICK_NAME");
        public final static Property Mute = new Property(2, int.class, "mute", false, "MUTE");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Display = new Property(4, String.class, "display", false, "DISPLAY");
        public final static Property Thumbnail_link = new Property(5, String.class, "thumbnail_link", false, "THUMBNAIL_LINK");
        public final static Property Original_link = new Property(6, String.class, "original_link", false, "ORIGINAL_LINK");
        public final static Property Data1 = new Property(7, String.class, "data1", false, "DATA1");
    }


    public ContactEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ContactEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT_ENTITY\" (" + //
                "\"USER_NAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: userName
                "\"NICK_NAME\" TEXT," + // 1: nickName
                "\"MUTE\" INTEGER NOT NULL ," + // 2: mute
                "\"PHONE\" TEXT," + // 3: phone
                "\"DISPLAY\" TEXT," + // 4: display
                "\"THUMBNAIL_LINK\" TEXT," + // 5: thumbnail_link
                "\"ORIGINAL_LINK\" TEXT," + // 6: original_link
                "\"DATA1\" TEXT);"); // 7: data1
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactEntity entity) {
        stmt.clearBindings();
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(1, userName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
        stmt.bindLong(3, entity.getMute());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String display = entity.getDisplay();
        if (display != null) {
            stmt.bindString(5, display);
        }
 
        String thumbnail_link = entity.getThumbnail_link();
        if (thumbnail_link != null) {
            stmt.bindString(6, thumbnail_link);
        }
 
        String original_link = entity.getOriginal_link();
        if (original_link != null) {
            stmt.bindString(7, original_link);
        }
 
        String data1 = entity.getData1();
        if (data1 != null) {
            stmt.bindString(8, data1);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactEntity entity) {
        stmt.clearBindings();
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(1, userName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
        stmt.bindLong(3, entity.getMute());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String display = entity.getDisplay();
        if (display != null) {
            stmt.bindString(5, display);
        }
 
        String thumbnail_link = entity.getThumbnail_link();
        if (thumbnail_link != null) {
            stmt.bindString(6, thumbnail_link);
        }
 
        String original_link = entity.getOriginal_link();
        if (original_link != null) {
            stmt.bindString(7, original_link);
        }
 
        String data1 = entity.getData1();
        if (data1 != null) {
            stmt.bindString(8, data1);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ContactEntity readEntity(Cursor cursor, int offset) {
        ContactEntity entity = new ContactEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickName
            cursor.getInt(offset + 2), // mute
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // display
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // thumbnail_link
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // original_link
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // data1
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContactEntity entity, int offset) {
        entity.setUserName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNickName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMute(cursor.getInt(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDisplay(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setThumbnail_link(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOriginal_link(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setData1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ContactEntity entity, long rowId) {
        return entity.getUserName();
    }
    
    @Override
    public String getKey(ContactEntity entity) {
        if(entity != null) {
            return entity.getUserName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ContactEntity entity) {
        return entity.getUserName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
