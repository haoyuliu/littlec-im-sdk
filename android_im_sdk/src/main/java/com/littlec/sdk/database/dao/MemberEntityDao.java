package com.littlec.sdk.database.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.littlec.sdk.database.entity.MemberEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMBER_ENTITY".
*/
public class MemberEntityDao extends AbstractDao<MemberEntity, Long> {

    public static final String TABLENAME = "MEMBER_ENTITY";

    /**
     * Properties of entity MemberEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MemberId = new Property(1, String.class, "memberId", false, "MEMBER_ID");
        public final static Property MemberNick = new Property(2, String.class, "memberNick", false, "MEMBER_NICK");
        public final static Property MemberShip = new Property(3, Integer.class, "memberShip", false, "MEMBER_SHIP");
        public final static Property Mute = new Property(4, int.class, "mute", false, "MUTE");
        public final static Property CreateDate = new Property(5, long.class, "createDate", false, "CREATE_DATE");
        public final static Property ModifyDate = new Property(6, long.class, "modifyDate", false, "MODIFY_DATE");
        public final static Property Data1 = new Property(7, String.class, "data1", false, "DATA1");
        public final static Property GroupId = new Property(8, String.class, "groupId", false, "GROUP_ID");
    }

    private Query<MemberEntity> groupEntity_MemberEntitiesQuery;

    public MemberEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MemberEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMBER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MEMBER_ID\" TEXT," + // 1: memberId
                "\"MEMBER_NICK\" TEXT," + // 2: memberNick
                "\"MEMBER_SHIP\" INTEGER," + // 3: memberShip
                "\"MUTE\" INTEGER NOT NULL ," + // 4: mute
                "\"CREATE_DATE\" INTEGER NOT NULL ," + // 5: createDate
                "\"MODIFY_DATE\" INTEGER NOT NULL ," + // 6: modifyDate
                "\"DATA1\" TEXT," + // 7: data1
                "\"GROUP_ID\" TEXT NOT NULL );"); // 8: groupId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMBER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MemberEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindString(2, memberId);
        }
 
        String memberNick = entity.getMemberNick();
        if (memberNick != null) {
            stmt.bindString(3, memberNick);
        }
 
        Integer memberShip = entity.getMemberShip();
        if (memberShip != null) {
            stmt.bindLong(4, memberShip);
        }
        stmt.bindLong(5, entity.getMute());
        stmt.bindLong(6, entity.getCreateDate());
        stmt.bindLong(7, entity.getModifyDate());
 
        String data1 = entity.getData1();
        if (data1 != null) {
            stmt.bindString(8, data1);
        }
        stmt.bindString(9, entity.getGroupId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MemberEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindString(2, memberId);
        }
 
        String memberNick = entity.getMemberNick();
        if (memberNick != null) {
            stmt.bindString(3, memberNick);
        }
 
        Integer memberShip = entity.getMemberShip();
        if (memberShip != null) {
            stmt.bindLong(4, memberShip);
        }
        stmt.bindLong(5, entity.getMute());
        stmt.bindLong(6, entity.getCreateDate());
        stmt.bindLong(7, entity.getModifyDate());
 
        String data1 = entity.getData1();
        if (data1 != null) {
            stmt.bindString(8, data1);
        }
        stmt.bindString(9, entity.getGroupId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MemberEntity readEntity(Cursor cursor, int offset) {
        MemberEntity entity = new MemberEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // memberId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // memberNick
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // memberShip
            cursor.getInt(offset + 4), // mute
            cursor.getLong(offset + 5), // createDate
            cursor.getLong(offset + 6), // modifyDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // data1
            cursor.getString(offset + 8) // groupId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MemberEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMemberId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMemberNick(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMemberShip(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMute(cursor.getInt(offset + 4));
        entity.setCreateDate(cursor.getLong(offset + 5));
        entity.setModifyDate(cursor.getLong(offset + 6));
        entity.setData1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGroupId(cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MemberEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MemberEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MemberEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "memberEntities" to-many relationship of GroupEntity. */
    public List<MemberEntity> _queryGroupEntity_MemberEntities(String groupId) {
        synchronized (this) {
            if (groupEntity_MemberEntitiesQuery == null) {
                QueryBuilder<MemberEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GroupId.eq(null));
                groupEntity_MemberEntitiesQuery = queryBuilder.build();
            }
        }
        Query<MemberEntity> query = groupEntity_MemberEntitiesQuery.forCurrentThread();
        query.setParameter(0, groupId);
        return query.list();
    }

}
