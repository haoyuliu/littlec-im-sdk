package com.littlec.sdk.database.entity;


import android.os.Parcel;
import android.os.Parcelable;

import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.NotNull;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.ToOne;
import org.greenrobot.greendao.DaoException;
import com.littlec.sdk.database.dao.DaoSession;
import com.littlec.sdk.database.dao.MediaEntityDao;
import com.littlec.sdk.database.dao.MessageEntityDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "Message".
 */
@Entity
public class MessageEntity implements Parcelable{
    @Id
    private Long id;
    private String msgId;
    private Integer chatType;
    private Long guid;
    private String from;
    private String fromNick;
    private String to;
    private int sendOrRecv;
    private int contentType;
    private int status;
    private long createTime;
    private boolean read;
    private boolean burnAfterRead;
    private String extra;
    private String data1;
    private boolean jiMaoFlag;
    /**
     * Not-null value.
     */
    @NotNull
    private String conversationId;
    private long MediaId;
    @ToOne(joinProperty = "MediaId")
    private MediaEntity mediaEntity;
    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;
    /** Used for active entity operations. */
    @Generated(hash = 499759967)
    private transient MessageEntityDao myDao;
    @Generated(hash = 2079774284)
    private transient Long mediaEntity__resolvedKey;
    @Generated(hash = 156890136)
    public MessageEntity(Long id, String msgId, Integer chatType, Long guid, String from,
            String fromNick, String to, int sendOrRecv, int contentType, int status, long createTime,
            boolean read, boolean burnAfterRead, String extra, String data1, boolean jiMaoFlag,
            @NotNull String conversationId, long MediaId) {
        this.id = id;
        this.msgId = msgId;
        this.chatType = chatType;
        this.guid = guid;
        this.from = from;
        this.fromNick = fromNick;
        this.to = to;
        this.sendOrRecv = sendOrRecv;
        this.contentType = contentType;
        this.status = status;
        this.createTime = createTime;
        this.read = read;
        this.burnAfterRead = burnAfterRead;
        this.extra = extra;
        this.data1 = data1;
        this.jiMaoFlag = jiMaoFlag;
        this.conversationId = conversationId;
        this.MediaId = MediaId;
    }
    @Generated(hash = 1797882234)
    public MessageEntity() {
    }
    public Long getId() {
        return this.id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getMsgId() {
        return this.msgId;
    }
    public void setMsgId(String msgId) {
        this.msgId = msgId;
    }
    public Integer getChatType() {
        return this.chatType;
    }
    public void setChatType(Integer chatType) {
        this.chatType = chatType;
    }
    public Long getGuid() {
        return this.guid;
    }
    public void setGuid(Long guid) {
        this.guid = guid;
    }
    public String getFrom() {
        return this.from;
    }
    public void setFrom(String from) {
        this.from = from;
    }
    public String getFromNick() {
        return this.fromNick;
    }
    public void setFromNick(String fromNick) {
        this.fromNick = fromNick;
    }
    public String getTo() {
        return this.to;
    }
    public void setTo(String to) {
        this.to = to;
    }
    public int getSendOrRecv() {
        return this.sendOrRecv;
    }
    public void setSendOrRecv(int sendOrRecv) {
        this.sendOrRecv = sendOrRecv;
    }
    public int getContentType() {
        return this.contentType;
    }
    public void setContentType(int contentType) {
        this.contentType = contentType;
    }
    public int getStatus() {
        return this.status;
    }
    public void setStatus(int status) {
        this.status = status;
    }
    public long getCreateTime() {
        return this.createTime;
    }
    public void setCreateTime(long createTime) {
        this.createTime = createTime;
    }
    public boolean getRead() {
        return this.read;
    }
    public void setRead(boolean read) {
        this.read = read;
    }
    public boolean getBurnAfterRead() {
        return this.burnAfterRead;
    }
    public void setBurnAfterRead(boolean burnAfterRead) {
        this.burnAfterRead = burnAfterRead;
    }
    public String getExtra() {
        return this.extra;
    }
    public void setExtra(String extra) {
        this.extra = extra;
    }
    public String getData1() {
        return this.data1;
    }
    public void setData1(String data1) {
        this.data1 = data1;
    }
    public String getConversationId() {
        return this.conversationId;
    }
    public void setConversationId(String conversationId) {
        this.conversationId = conversationId;
    }
    public long getMediaId() {
        return this.MediaId;
    }
    public void setMediaId(long MediaId) {
        this.MediaId = MediaId;
    }
    /** To-one relationship, resolved on first access. */
    @Generated(hash = 911439034)
    public MediaEntity getMediaEntity() {
        long __key = this.MediaId;
        if (mediaEntity__resolvedKey == null
                || !mediaEntity__resolvedKey.equals(__key)) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MediaEntityDao targetDao = daoSession.getMediaEntityDao();
            MediaEntity mediaEntityNew = targetDao.load(__key);
            synchronized (this) {
                mediaEntity = mediaEntityNew;
                mediaEntity__resolvedKey = __key;
            }
        }
        return mediaEntity;
    }
    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 825439118)
    public void setMediaEntity(@NotNull MediaEntity mediaEntity) {
        if (mediaEntity == null) {
            throw new DaoException(
                    "To-one property 'MediaId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.mediaEntity = mediaEntity;
            MediaId = mediaEntity.getId();
            mediaEntity__resolvedKey = MediaId;
        }
    }
    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }
    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }
    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }
    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 83651317)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMessageEntityDao() : null;
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeValue(this.id);
        dest.writeString(this.msgId);
        dest.writeValue(this.chatType);
        dest.writeValue(this.guid);
        dest.writeString(this.from);
        dest.writeString(this.fromNick);
        dest.writeString(this.to);
        dest.writeInt(this.sendOrRecv);
        dest.writeInt(this.contentType);
        dest.writeInt(this.status);
        dest.writeLong(this.createTime);
        dest.writeByte(this.read ? (byte) 1 : (byte) 0);
        dest.writeByte(this.burnAfterRead ? (byte) 1 : (byte) 0);
        dest.writeByte(this.jiMaoFlag ? (byte) 1 : (byte) 0);
        dest.writeString(this.extra);
        dest.writeString(this.data1);
        dest.writeString(this.conversationId);
        dest.writeLong(this.MediaId);
        dest.writeParcelable(this.mediaEntity, flags);
        dest.writeValue(this.mediaEntity__resolvedKey);
    }
    public boolean getJiMaoFlag() {
        return this.jiMaoFlag;
    }
    public void setJiMaoFlag(boolean jiMaoFlag) {
        this.jiMaoFlag = jiMaoFlag;
    }

    protected MessageEntity(Parcel in) {
        this.id = (Long) in.readValue(Long.class.getClassLoader());
        this.msgId = in.readString();
        this.chatType = (Integer) in.readValue(Integer.class.getClassLoader());
        this.guid = (Long) in.readValue(Long.class.getClassLoader());
        this.from = in.readString();
        this.fromNick = in.readString();
        this.to = in.readString();
        this.sendOrRecv = in.readInt();
        this.contentType = in.readInt();
        this.status = in.readInt();
        this.createTime = in.readLong();
        this.read = in.readByte() != 0;
        this.burnAfterRead = in.readByte() != 0;
        this.jiMaoFlag=in.readByte()!=0;
        this.extra = in.readString();
        this.data1 = in.readString();
        this.conversationId = in.readString();
        this.MediaId = in.readLong();
        this.mediaEntity = in.readParcelable(MediaEntity.class.getClassLoader());
        this.mediaEntity__resolvedKey = (Long) in.readValue(Long.class.getClassLoader());
    }

    public static final Creator<MessageEntity> CREATOR = new Creator<MessageEntity>() {
        @Override
        public MessageEntity createFromParcel(Parcel source) {
            return new MessageEntity(source);
        }

        @Override
        public MessageEntity[] newArray(int size) {
            return new MessageEntity[size];
        }
    };
}
